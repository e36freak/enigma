#!/usr/bin/awk -f

# TODO:
# allow option to replace specific non-alpha chars with sequences

# usage: enigma -- [OPTIONS] ROTOR1 ROTOR2 ROTOR3 REFLECTOR [FILE ...]
#
# the '--' is required, so AWK itself doesn't read the options
#
# Reads FILE(s), or the standard input if not provided, and encrypts or
# decrypts the contents in the same manor as an Enigma machine. 
#
#  Options:
#   -i, --initial CHARS   Set the rotors according to the initial setting in
#                         CHARS. CHARS is a three-letter string containing the
#                         letters that would be visible in the windows
#   -h, --help            Display this help and exit
#
# The ROTOR* files contain 26 lines of the format:
#   IN OUT [NOTCH]
# IN and OUT are letters, and NOTCH, if it exists, is a plus sign (+). For
# example, the line "a f +" would indicate that "a" is mapped to "f", and that
# the next rotor should step when on the "a". The "new_rotor" tool included in
# this repo will randomly generate rotors for you.
#
# The REFLECTOR file contains 13 lines of letter pairs, such as:
#   "b x"
# Where "b" and "x" are switched upon reflection. Each letter may appear only
# once, and all letters must be present.



## usage: delete_arr(array)
## deletes every element in "array"
function delete_arr(arr) {
  split("", arr);
}

## usage: getopts(optstring [, longopt_array ])
## Parses options, and deletes them from ARGV. "optstring" is of the form
## "ab:c". Each letter is a possible option. If the letter is followed by a
## colon (:), then the option requires an argument. If an argument is not
## provided, or an invalid option is given, getopts will print the appropriate
## error message and return "?". Returns each option as it's read, and -1 when
## no options are left. "optind" will be set to the index of the next
## non-option argument when finished. "optarg" will be set to the option's
## argument, when provided. If not provided, "optarg" will be empty. "optname"
## will be set to the current option, as provided. Getopts will delete each
## option and argument that it successfully reads, so awk will be able to treat
## whatever's left as filenames/assignments, as usual. If provided,
## "longopt_array" is the name of an associative array that maps long options to
## the appropriate short option (do not include the hyphens on either).
## Sample usage can be found in the examples dir, with gawk extensions, or in
## the ogrep script for a POSIX example: https://github.com/e36freak/ogrep
function getopts(optstring, longarr,    opt, trimmed, hasarg, repeat) {
  hasarg = repeat = 0;
  optarg = "";
  # increment optind
  optind++;

  # return -1 if the current arg is not an option or there are no args left
  if (ARGV[optind] !~ /^-/ || optind >= ARGC) {
    return -1;
  }

  # if option is "--" (end of options), delete arg and return -1
  if (ARGV[optind] == "--") {
    for (i=1; i<=optind; i++) {
      delete ARGV[i];
    }
    return -1;
  }

  # if the option is a long argument...
  if (ARGV[optind] ~ /^--/) {
    # trim hyphens
    trimmed = substr(ARGV[optind], 3);
    # if of the format --foo=bar, split the two. assign "bar" to optarg and
    # set hasarg to 1
    if (trimmed ~ /.*=.*/) {
      optarg = trimmed;
      sub(/=.*/, "", trimmed); sub(/^[^=]*=/, "", optarg);
      hasarg = 1;
    }
    
    # invalid long opt
    if (!(trimmed in longarr)) {
      printf("unrecognized option -- '%s'\n", ARGV[optind]) > "/dev/stderr";
      return "?";
    }

    opt = longarr[trimmed];
    # set optname by prepending dashes to the trimmed argument
    optname = "--" trimmed;

  # otherwise, it is a short option
  } else {
    # remove the hyphen, and get just the option letter
    opt = substr(ARGV[optind], 2, 1);
    # set trimmed to whatevers left
    trimmed = substr(ARGV[optind], 3);

    # invalid option
    if (!index(optstring, opt)) {
      printf("invalid option -- '%s'\n", opt) > "/dev/stderr";
      return "?";
    }

    # if there is more to the argument than just -o
    if (length(trimmed)) {
      # if option requires an argument, set the rest to optarg and hasarg to 1
      if (index(optstring, opt ":")) {
        optarg = trimmed;
        hasarg = 1;

      # otherwise, prepend a hyphen to the rest and set repeat to 1, so the
      # same arg is processed again without the first option
      } else {
        ARGV[optind] = "-" trimmed;
        repeat = 1;
      }
    }

    # set optname by prepending a hypen to opt
    optname = "-" opt;
  }

  # if the option requires an arg and hasarg is 0
  if (index(optstring, opt ":") && !hasarg) {
    # increment optind, check if no arguments are left
    if (++optind >= ARGC) {
      printf("option requires an argument -- '%s'\n", optname) > "/dev/stderr";
      return "?";
    }

    # set optarg
    optarg = ARGV[optind];

  # if repeat is set, decrement optind so we process the same arg again
  # mutually exclusive to needing an argument, otherwise hasarg would be set
  } else if (repeat) {
    optind--;
  }

  # delete all arguments up to this point, just to make sure
  for (i=1; i<=optind; i++) {
    delete ARGV[i];
  }

  # return the option letter
  return opt;
}

# print the usage information to the standard output
function usage() {
  printf("%s\n\n%s\n\n%s\n%s\n\n",
"usage: enigma -- [OPTIONS] ROTOR1 ROTOR2 ROTOR3 REFLECTOR [FILE ...]",
"the '--' is required, so AWK itself doesn't read the options",
"Reads FILE(s), or the standard input if not provided, and encrypts or",
"decrypts the contents in the same manor as an Enigma machine. " \
) > "/dev/stderr";
  printf("%s\n%s\n%s\n%s\n%s\n\n",
" Options:",
"  -i, --initial CHARS   Set the rotors according to the initial setting in",
"                        CHARS. CHARS is a three-letter string containing the",
"                        letters that would be visible in the windows",
"  -h, --help            Display this help and exit" \
) > "/dev/stderr";
  printf("%s\n%s\n%s\n%s\n%s\n%s\n\n%s\n%s\n%s\n%s\n",
"The ROTOR* and REFLECTOR files contain 26 lines of the format:",
"  IN OUT [NOTCH]",
"IN and OUT are letters, and NOTCH, if it exists, is a plus sign (+). For",
"example, the line \"a f +\" would indicate that \"a\" is mapped to \"f\", and that",
"the next rotor should step when on the \"a\". The \"new_rotor\" tool included in",
"this repo will randomly generate rotors for you." \
"The REFLECTOR file contains 13 lines of letter pairs, such as:",
"  \"b x\"",
"Where \"b\" and \"x\" are switched upon reflection. Each letter may appear only",
"once, and all letters must be present." \
) > "/dev/stderr";
}

BEGIN {
  # initial variables
  err = toexit = 0;
  init_setting = "aaa";

  # map long options to short ones
  longopts["initial"] = "i";
  longopts["help"]    = "h";

  # actually read in the options
  while ((opt = getopts("i:h", longopts)) != -1) {
    # -i, --initial CHARS
    if (opt == "i") {
      if (length(optarg) != 3 || optarg ~ /[^[:alpha:]]/) {
        printf("invalid CHARS for %s: %s\n", optname, optarg) > "/dev/stderr";
        err = toexit = 1; exit;
      }
      init_setting = tolower(optarg);

    # -h, --help
    } else if (opt == "h") {
      usage(); toexit = 1; exit;

    # error
    } else {
      err = toexit = 1; exit;
    }
  }

  # make sure there are at least 4 arguments left
  if (optind + 3 >= ARGC) {
    print "3 ROTORs and 1 REFLECTOR must be provided" > "/dev/stderr";
    err = toexit = 1; exit;
  }

  # create an array of all letters, for checks and such
  l = "abcdefghijklmnopqrstuvwxyz";
  l_len = split(l, letters, "");
  for (i=1; i<=l_len; i++) {
    letters[letters[i]] = i;
  }

  # read in rotors
  for (r=1; r<=3; r++) {
    notch_c=0
    while ((getline < ARGV[optind + r - 1]) > 0) {
      a = tolower($1);
      b = tolower($2);

      # validate letters
      if (a ~ /[^[:alpha:]]/ || b ~ /[^[:alpha:]]/) {
        printf("invalid rotor: %s\n", ARGV[optind + r - 1]) > "/dev/stderr";
        err = toexit = 1; exit;
      }

      rotors_f[r,a] = a;
      rotors_r[r,b] = b;

      if ($3 == "+") {
        notches[r,a] = 1;
        notch_c++;
      }
    }
    close(ARGV[optind + r - 1]);

    # make sure all 26 letters were accounted for, and the notches are correct
    if (notch_c < 1 || notch_c > 3) {
      printf("invalid rotor: %s\n", ARGV[optind + r - 1]) > "/dev/stderr";
      err = toexit = 1; exit;
    }
    delete_arr(cur_notches);
    for (i=1; i<=l_len; i++) {
      if (!(r SUBSEP letters[i] in rotors_f) ||
          !(r SUBSEP letters[i] in rotors_r)) {
        printf("invalid rotor: %s\n", ARGV[optind + r - 1]) > "/dev/stderr";
        err = toexit = 1; exit;
      }

      if (r SUBSEP letters[i] in notches) {
        cur_notches[i];
      }
    }
    for (i in cur_notches) {
      if (((i+1) % 26 in cur_notches) || ((i-1+26) % 26 in cur_notches)) {
        printf("invalid rotor: %s\n", ARGV[optind + r - 1]) > "/dev/stderr";
        err = toexit = 1; exit;
      }
    }

    # delete filename from ARGV
    delete ARGV[optind + r - 1];
  }

  # read in reflector
  while ((getline < ARGV[optind + 3]) > 0) {
    a = tolower($1);
    b = tolower($2);

    # validate letters
    if (a ~ /[^[:alpha:]]/ || b ~ /[^[:alpha:]]/) {
      printf("invalid reflector: %s\n", ARGV[optind + 3]) > "/dev/stderr";
      err = toexit = 1; exit;
    }

    reflect[a] = b;
    reflect[b] = a;
  }

  # validate reflector
  for (i=1; i<=l_len; i++) {
    if (!(letters[i] in reflect)) {
      printf("invalid reflector: %s\n", ARGV[optind + 3]) > "/dev/stderr";
      err = toexit = 1; exit;
    }
  }

  # delect reflector from ARGV
  delete ARGV[optind + 3];
  
  # get starting positions of rotors
  split(init_setting, s, "");
  for (r=1; r<=3; r++) {
    pos[r] = s[r];
  }
}

# for each line of input...
{
  # split it up into an array of chars
  len = split(tolower($0), chars, "");

  # loop over each input char
  for (c=1; c<=len; c++) {
    # replace non-alpha chars with "x" (may be expanded upon in the future)
    if (chars[c] ~ /[^[:alpha:]]/) {
      chars[c] = "x";
    }

    # determine which rotors to step
    to_step[1] = 1; to_step[2] = 0; to_step[3] = 0;
    for (r=1; r<=3; r++) {
      # if there's a notch in the current position
      if (notches[r,pos[r]]) {
        # step both the current rotor and the next one
        to_step[r] = 1;
        to_step[r+1] = 1;
      }
    }
    # actually step them
    for (r=1; r<=3; r++) {
      if (to_step[r]) {
        pos[r] = letters[(letters[pos[r]] % l_len) + 1];
      }
    }

    # send character through rotors
    out = chars[c];
    for (r=1; r<=3; r++) {
      out = rotors_f[r,out];
    }
    # reflect
    out = reflect[out];

    # back through rotors
    for (r=3; r>=1; r--) {
      out = rotors_r[r,out];
    }
    

    printf("%s", out);
  }

  print "";
}

END {
  # exit prematurely
  if (toexit) {
    exit err;
  }
}



# Copyright Daniel Mills <dm@e36freak.com>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
